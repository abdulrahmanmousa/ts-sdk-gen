// This file is auto-generated by @ts-sdk-gen/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@ts-sdk-gengen/client-fetch'

import type {
  AddPetData,
  AddPetError,
  AddPetResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  CreateUsersWithListInputData,
  CreateUsersWithListInputError,
  CreateUsersWithListInputResponse,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByStatusError,
  FindPetsByStatusResponse,
  FindPetsByTagsData,
  FindPetsByTagsError,
  FindPetsByTagsResponse,
  GetInventoryError,
  GetInventoryResponse,
  GetOrderByIdData,
  GetOrderByIdError,
  GetOrderByIdResponse,
  GetPetByIdData,
  GetPetByIdError,
  GetPetByIdResponse,
  GetUserByNameData,
  GetUserByNameError,
  GetUserByNameResponse,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
  LogoutUserError,
  LogoutUserResponse,
  PlaceOrderData,
  PlaceOrderError,
  PlaceOrderResponse,
  UpdatePetData,
  UpdatePetError,
  UpdatePetResponse,
  UpdatePetWithFormData,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  UploadFileData,
  UploadFileError,
  UploadFileResponse
} from './types.gen'

export const client = createClient(createConfig())

/**
 * Add a new pet to the store
 * Add a new pet to the store
 */
export const addPet = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AddPetData, ThrowOnError>
) =>
  (options?.client ?? client).post<AddPetResponse, AddPetError, ThrowOnError>({
    ...options,
    url: '/pet'
  })

/**
 * Update an existing pet
 * Update an existing pet by Id
 */
export const updatePet = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdatePetData, ThrowOnError>
) =>
  (options?.client ?? client).put<UpdatePetResponse, UpdatePetError, ThrowOnError>({
    ...options,
    url: '/pet'
  })

/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export const findPetsByStatus = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<FindPetsByStatusData, ThrowOnError>
) =>
  (options?.client ?? client).get<FindPetsByStatusResponse, FindPetsByStatusError, ThrowOnError>({
    ...options,
    url: '/pet/findByStatus'
  })

/**
 * Finds Pets by tags
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTags = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<FindPetsByTagsData, ThrowOnError>
) =>
  (options?.client ?? client).get<FindPetsByTagsResponse, FindPetsByTagsError, ThrowOnError>({
    ...options,
    url: '/pet/findByTags'
  })

/**
 * Find pet by ID
 * Returns a single pet
 */
export const getPetById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetPetByIdData, ThrowOnError>
) =>
  (options?.client ?? client).get<GetPetByIdResponse, GetPetByIdError, ThrowOnError>({
    ...options,
    url: '/pet/{petId}'
  })

/**
 * Updates a pet in the store with form data
 */
export const updatePetWithForm = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdatePetWithFormData, ThrowOnError>
) =>
  (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/pet/{petId}'
  })

/**
 * Deletes a pet
 */
export const deletePet = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeletePetData, ThrowOnError>
) =>
  (options?.client ?? client).delete<void, unknown, ThrowOnError>({
    ...options,
    url: '/pet/{petId}'
  })

/**
 * uploads an image
 */
export const uploadFile = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UploadFileData, ThrowOnError>
) =>
  (options?.client ?? client).post<UploadFileResponse, UploadFileError, ThrowOnError>({
    ...options,
    url: '/pet/{petId}/uploadImage'
  })

/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export const getInventory = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) =>
  (options?.client ?? client).get<GetInventoryResponse, GetInventoryError, ThrowOnError>({
    ...options,
    url: '/store/inventory'
  })

/**
 * Place an order for a pet
 * Place a new order in the store
 */
export const placeOrder = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PlaceOrderData, ThrowOnError>
) =>
  (options?.client ?? client).post<PlaceOrderResponse, PlaceOrderError, ThrowOnError>({
    ...options,
    url: '/store/order'
  })

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetOrderByIdData, ThrowOnError>
) =>
  (options?.client ?? client).get<GetOrderByIdResponse, GetOrderByIdError, ThrowOnError>({
    ...options,
    url: '/store/order/{orderId}'
  })

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 */
export const deleteOrder = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteOrderData, ThrowOnError>
) =>
  (options?.client ?? client).delete<void, unknown, ThrowOnError>({
    ...options,
    url: '/store/order/{orderId}'
  })

/**
 * Create user
 * This can only be done by the logged in user.
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<CreateUserData, ThrowOnError>
) =>
  (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
    ...options,
    url: '/user'
  })

/**
 * Creates list of users with given input array
 * Creates list of users with given input array
 */
export const createUsersWithListInput = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<CreateUsersWithListInputData, ThrowOnError>
) =>
  (options?.client ?? client).post<
    CreateUsersWithListInputResponse,
    CreateUsersWithListInputError,
    ThrowOnError
  >({
    ...options,
    url: '/user/createWithList'
  })

/**
 * Logs user into the system
 */
export const loginUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<LoginUserData, ThrowOnError>
) =>
  (options?.client ?? client).get<LoginUserResponse, LoginUserError, ThrowOnError>({
    ...options,
    url: '/user/login'
  })

/**
 * Logs out current logged in user session
 */
export const logoutUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) =>
  (options?.client ?? client).get<LogoutUserResponse, LogoutUserError, ThrowOnError>({
    ...options,
    url: '/user/logout'
  })

/**
 * Get user by user name
 */
export const getUserByName = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetUserByNameData, ThrowOnError>
) =>
  (options?.client ?? client).get<GetUserByNameResponse, GetUserByNameError, ThrowOnError>({
    ...options,
    url: '/user/{username}'
  })

/**
 * Update user
 * This can only be done by the logged in user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateUserData, ThrowOnError>
) =>
  (options?.client ?? client).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
    ...options,
    url: '/user/{username}'
  })

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteUserData, ThrowOnError>
) =>
  (options?.client ?? client).delete<void, unknown, ThrowOnError>({
    ...options,
    url: '/user/{username}'
  })
